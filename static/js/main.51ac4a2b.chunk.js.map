{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["luhn","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","actualInputValue","valueToOutput","informationCardNumberLenght","setState","event","target","value","react_default","a","createElement","type","onChange","valueChange","bind","onClick","onButtonClickSet","App_Child","React","Component","Child","_this2","current","Number","lenghtOfNumber","informationCheckSum","informationBrand","brandFirstElement","resultLenght","resultCheckSum","resultBrand","nextProps","fromParent","clearingPrintedMessage","toString","length","validate","Array","from","onButtonCardLengthValidation","onButtonCardNumberValidation","onButtonCardBrandValidation","informationCardNumberNotCorrect","allValidateInOne","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51ac4a2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nconst luhn = require(\"luhn\");\r\n\r\nclass App extends React.Component {\r\nconstructor(props) {\r\nsuper(props);\r\n\r\nthis.state = { \r\n\tactualInputValue: null,\r\n\tvalueToOutput: null,\r\n\tinformationCardNumberLenght: null\r\n\t};\r\n}\r\n\r\nonButtonClickSet() {\r\n\tif(this.state.actualInputValue === null){\r\n\t\tthis.setState({informationCardNumberLenght: \"Please input card number!\"});\r\n\t}\r\n\tthis.setState(state => ({ valueToOutput: state.actualInputValue }));\r\n}\r\nvalueChange(event) {\r\nthis.setState({actualInputValue: event.target.value});\r\n}\r\n\t\r\nrender() {\r\nreturn (\r\n<div>\r\n\t<div>\r\n\t\t<div><output>Input card number ></output><input type=\"number\" onChange={this.valueChange.bind(this)}/><button onClick={this.onButtonClickSet.bind(this)}>Send</button></div>\r\n\t\t<div><output>{this.state.informationCardNumberLenght}</output></div>\r\n\t\t{this.state.valueToOutput && <Child value={this.state.valueToOutput} />}\r\n\t</div>\r\n</div>\r\n);\r\n}\r\n}\r\nclass Child extends React.Component{\r\nconstructor (props) {\r\nsuper (props);\r\n\tthis.state = {\r\n\t\tcurrent: Number(this.props),\r\n\t\tlenghtOfNumber: null,\r\n\t\tinformationCardNumberLenght: null,\r\n\t\tinformationCheckSum: null,\r\n\t\tinformationBrand: null,\r\n\t\tbrandFirstElement: null,\r\n\t\tresultLenght: null,\r\n\t\tresultCheckSum: null,\r\n\t\tresultBrand: null\r\n\t};\r\n}\r\n\r\ncomponentWillReceiveProps(nextProps) {\r\n\tif (nextProps.value !== this.state.fromParent) {\r\n\tthis.setState({\r\n\t\tcurrent: Number(nextProps.value),\r\n\t})\r\n\t}\r\n}\r\n\r\nclearingPrintedMessage() {\r\n\t//clean all previous message\r\n\t// this.setState({informationBrand: null});\r\n\t// this.setState({informationCardNumberLenght: null});\r\n\t// this.setState({informationCheckSum: null});\r\n\t// this.setState({informationCardNumberNotCorrect: null});\r\n}\r\n\r\nonButtonCardLengthValidation() {\r\n\t//clean all previous message\r\n\tthis.clearingPrintedMessage();\r\n\t//Checking id card number have 16 digits\r\n\tif(this.state.current.toString().length === 16){\r\n\t\tthis.setState({informationCardNumberLenght: \"Card Number has a good length\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultLenght = 'true',\r\n\t\t});\r\n\t} else {\r\n\t\tthis.setState({informationCardNumberLenght: \"Card Number has not a good length\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultLenght = 'false',\r\n\t\t});\r\n\r\n\t}\r\n}\r\nonButtonCardNumberValidation() {\r\n\t//clean all previous message\r\n\tthis.clearingPrintedMessage();\r\n\r\n\t//algoritm luhn validate a check sum of vard number\r\n\tconst is_valid = luhn.validate(this.state.current); //should respond true.\r\n\tif(is_valid === true){\r\n\t\tthis.setState({informationCheckSum: \"Card checksum is true\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultCheckSum = 'true',\r\n\t\t});\r\n\t} else {\r\n\t\tthis.setState({informationCheckSum: \"Card checksum is false\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultCheckSum = 'false',\r\n\t\t});\r\n\t}\r\n}\r\nonButtonCardBrandValidation() {\r\n\t//clean all previous message\r\n\tthis.clearingPrintedMessage();\r\n\t//checking is first digit of card number is represent as some of card brand\r\n\tconst brandFirstElement = Array.from(this.state.current.toString());\r\n\tif(brandFirstElement[0] === '4'){\r\n\t\tthis.setState({informationBrand: \"VISA is brand of card\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultBrand = 'true',\r\n\t\t});\r\n\t} else if(brandFirstElement[0] === '3'){\r\n\t\tthis.setState({informationBrand: \"American Express is brand of card\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultBrand = 'true',\r\n\t\t});\r\n\t} else if(brandFirstElement[0] === '5'){\r\n\t\tthis.setState({informationBrand: \"MasterCard is brand of card\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultBrand = 'true',\r\n\t\t});\r\n\t} else{\r\n\t\tthis.setState({informationBrand: \"Card brand do not recognized\"});\r\n\t\tthis.setState({\r\n\t\t\tvalue: this.state.resultBrand = 'false',\r\n\t\t});\r\n\t}\r\n}\r\nallValidateInOne() {\r\n\t//clean all previous message\r\n\tthis.clearingPrintedMessage();\r\n\t\r\n\tthis.onButtonCardLengthValidation();\r\n\tthis.onButtonCardNumberValidation();\r\n\tthis.onButtonCardBrandValidation();\r\n\r\n\t//if one result is wrong print only wrong, if all results are ok then print all\r\n\t//TODO\r\n\r\n\t//message about all results\r\n\tif (this.state.resultLenght === 'false' || this.state.resultBrand === 'false' || this.state.resultCheckSum === 'false') {\r\n\t\tthis.setState({ informationCardNumberNotCorrect: \"One of card number validator result is wrong\" });\r\n\t} else {\r\n\t\tthis.setState({ informationCardNumberNotCorrect: \"All of card number validator results are green\" });\r\n\t};\r\n}\r\n\r\nrender() {\r\n\treturn (\r\n\t<div>\r\n\t<output>Output:{this.state.current}</output>\r\n\t\t<div>\r\n\t\t\t<button onClick={this.onButtonCardLengthValidation.bind(this)}>Validate card length</button>\r\n\t\t\t<button onClick={this.onButtonCardNumberValidation.bind(this)}>Validate card number</button>\r\n\t\t\t<button onClick={this.onButtonCardBrandValidation.bind(this)}>Validate card brand</button>\r\n\t\t\t<button onClick={this.allValidateInOne.bind(this)}>Validate card</button>\r\n\t\t</div>\r\n\t<div><output>{this.state.informationCardNumberNotCorrect}</output></div>\r\n\t<div><output>{this.state.informationCardNumberLenght}</output></div>\r\n\t<div><output>{this.state.informationBrand}</output></div>\r\n\t<div><output>{this.state.informationCheckSum}</output></div>\r\n\t</div>\r\n)\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}