{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["luhn","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","actualInputValue","valueToOutput","informationCardNumberLenght","setState","event","target","value","react_default","a","createElement","type","onChange","valueChange","bind","onClick","onButtonClickSet","App_Child","React","Component","Child","_this2","current","Number","lenghtOfNumber","brandFirstElement","nextProps","fromParent","toString","length","validate","Array","from","onButtonCardLengthValidation","onButtonCardNumberValidation","onButtonCardBrandValidation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a4e2e79.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nconst luhn = require(\"luhn\");\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\tsuper(props);\r\n\t\r\n\tthis.state = { \r\n\t\tactualInputValue: null,\r\n\t\tvalueToOutput: null,\r\n\t\tinformationCardNumberLenght: null\r\n\t\t};\r\n\t}\r\n\t\r\n\tonButtonClickSet() {\r\n\t\tif(this.state.actualInputValue === null){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Please input card number!\"});\r\n\t\t}\r\n\t\tthis.setState(state => ({ valueToOutput: state.actualInputValue }));\r\n\t}\r\n\tvalueChange(event) {\r\n\tthis.setState({actualInputValue: event.target.value});\r\n\t}\r\n\t\r\nrender() {\r\nreturn (\r\n\t<div>\r\n\t\t<div>\r\n\t\t\t\r\n\t\t\t<div><output>Input card number ></output><input type=\"number\" onChange={this.valueChange.bind(this)} /></div>\r\n\t\t\t<div><button onClick={this.onButtonClickSet.bind(this)}>Send</button></div>\r\n\t\t\t<div><output>{this.state.informationCardNumberLenght}</output></div>\r\n\t\t\t{this.state.valueToOutput && <Child value={this.state.valueToOutput} />}\r\n\t\t</div>\r\n\t</div>\r\n);\r\n}\r\n}\r\nclass Child extends React.Component{\r\n\tconstructor (props) {\r\n\tsuper (props);\r\n\tthis.state = {\r\n\t\tcurrent: Number(this.props),\r\n\t\tlenghtOfNumber: null,\r\n\t\tinformationCardNumberLenght: null,\r\n\t\tbrandFirstElement: null\r\n\t};\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (nextProps.value !== this.state.fromParent) {\r\n\t\tthis.setState({\r\n\t\t\tcurrent: Number(nextProps.value),\r\n\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tonButtonCardLengthValidation() {\r\n\t\tif(this.state.current.toString().length === 16){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Card Number has a good length\"});\r\n\t\t} else {\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Card Number has not a good length\"});\r\n\t\t}\r\n\t}\r\n\tonButtonCardNumberValidation() {\r\n\t\tconst is_valid = luhn.validate(this.state.current); // should respond true.\r\n\t\tif(is_valid === true){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Card checksum is true\"});\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Card checksum is false\"});\r\n\t\t}\r\n\t}\r\n\tonButtonCardBrandValidation() {\r\n\t\tconst brandFirstElement = Array.from(this.state.current.toString());\r\n\t\t  if(brandFirstElement[0] === '4'){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"VISA\"});\r\n\t\t} else if(brandFirstElement[0] === '3'){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"American Express\"});\r\n\t\t} else if(brandFirstElement[0] === '5'){\r\n\t\t\tthis.setState({informationCardNumberLenght: \"MasterCard\"});\r\n\t\t} else{\r\n\t\t\tthis.setState({informationCardNumberLenght: \"Card type do not recognized\"});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div>\r\n\t\t<output>Output:{this.state.current}</output>\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={this.onButtonCardLengthValidation.bind(this)}>Validate card length</button>\r\n\t\t\t\t<button onClick={this.onButtonCardNumberValidation.bind(this)}>Validate card number</button>\r\n\t\t\t\t<button onClick={this.onButtonCardBrandValidation.bind(this)}>Validate card brand</button>\r\n\t\t\t</div>\r\n\t\t<div><output>{this.state.informationCardNumberLenght}</output></div>\r\n\r\n\t\t</div>\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}